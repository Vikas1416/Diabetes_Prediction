# -*- coding: utf-8 -*-
"""Diabetes_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QwpIaCFxMEA9hw4FLv4JPKeds8uM8aaS

Importing Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm #svm --> Support Vector Machine
from sklearn.metrics import accuracy_score

"""Data collection and preprocessing"""

db_data = pd.read_csv('diabetes.csv')

db_data.head()

db_data.describe()

db_data.shape

db_data['Outcome'].value_counts()

db_data.groupby('Outcome').mean()

#separating data annd label
X = db_data.drop(columns = 'Outcome', axis = 1)
Y= db_data['Outcome']

print(X)
print(Y)

#data standardisation(feature_scaling)
scaler = StandardScaler()

scaler.fit(X)
standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data
Y= db_data['Outcome']

print(X)

print(Y)

#train_test_split
X_train,X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2,stratify = Y, random_state = 2)

print(X.shape, X_train.shape, X_test.shape)

print(X_train)

print(X_train)

print(Y_train)

print(Y_test)

"""Training the model"""

classifier = svm.SVC(kernel = 'linear')

# training the support vector machine classifier
classifier.fit(X_train, Y_train)

"""Model Evaluation"""

# Accuracy score on training data
X_train_prediction = classifier.predict(X_train)
X_train_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data: ', X_train_accuracy)

X_test_prediction = classifier.predict(X_test)
X_test_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on test data: ', X_test_accuracy)

"""Making a prediction"""

input_data = (6,148,72,35,0,33.6,0.627,50)
# chaning the input_data in numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the data as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# standardized the input data

std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if prediction[0] == 0:
  print('The person is non-daibetic')
else:
  print('The person is diabetic')

